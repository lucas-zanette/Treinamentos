package br.com.elaborata.controle;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.Serializable;

import br.com.elaborata.modelo.Produto;

public class CtlProduto {
	
	//ao criar o arquivo eu já armazeno uma lista para não precisar ficar lendo arquivos em disco
	//logo ao inves de ler arquivo por aquivos se eu tiver 1 milhaõ de arquivos ficará lento
	//entao armazeno em lista só o nome dos arquivos e não preciso ir no disco
	
	//final exemplo: (private final int lista = 3) final faz ser uma constante e não varia
	private final String caminho = "/home/aluno/workspace/Lucas_JavaII_Nov2017_Turma10252/Dados/";
	private File pasta;
	private String[] lst;
	private int pos = -1; //posição -1 porque a posição 0 no array é uma posição válida e poderia ter um registro
	
	public CtlProduto (){
		//cria um objeto vinculado ao diretorio onde estão os arquivos serializados.
		File pasta = new File(caminho);

		//recupera a lista de nome de arquivos que estão gravagos na pasta.
		lst = pasta.list(); //vai retornar a lista de arquivos que este diretorio contem
	}

	public void salvar(Produto p) throws FileNotFoundException, IOException{
										//nome do arquivo é o proprio código
		serializar(p, Integer.toString(p.getCodigo()));
		
	}
	
	public void excluir(int codigo) {
		
	}
	
	public Produto getProximo(){
		//verificar se tem o proximo porque se chegar no ultimo sem este tratamento vai dar erro na tela
		return null;
	}
	
	public Produto getAnterior(){
		return null;
	}
	
	//verificar se tem o proximo porque se chegar no ultimo sem este tratamento vai dar erro na tela
	public boolean temAnt(){
		//return false;
		return (pos < (lst.length - 1));
		
	}
	
	public boolean temProx(){
		//if (pos < (lst.length - 1))		
		//return false;

		// pode fazer o retur direto desta forma
		return (pos < (lst.length - 1));
	}
	
	
	//função salvar generica
	private void serializar(Serializable obj, String nomeArq) {
		//pega o que passar e grava
		//preciso colocar (implemets Serializable) na classe pojo Produto para indicar que deixo serializar
		//exemplo de polimorfismo se eu passar "private void serializar(Serializable obj)" entendi que faz algo com os parametros serializable e o obj

		String arquivo = caminho + nomeArq + ".obj";
		
		try {
			ObjectOutputStream output = new ObjectOutputStream(new FileOutputStream(arquivo));
			output.writeObject(obj);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
}
